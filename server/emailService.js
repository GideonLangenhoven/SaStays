const nodemailer = require('nodemailer');
const twilio = require('twilio');
const { format, parseISO } = require('date-fns');

// Twilio credentials from .env
const accountSid = process.env.TWILIO_ACCOUNT_SID;
const authToken = process.env.TWILIO_AUTH_TOKEN;
const twilioPhoneNumber = process.env.TWILIO_PHONE_NUMBER;

// Initialize Twilio client only if credentials are provided
const twilioClient = (accountSid && authToken) ? twilio(accountSid, authToken) : null;

// Create a transporter object for sending emails
const transporter = nodemailer.createTransport({
    host: process.env.EMAIL_HOST || "smtp.ethereal.email",
    port: process.env.EMAIL_PORT || 587,
    secure: false, // true for 465, false for other ports
    auth: {
        user: process.env.EMAIL_USER, // Will be generated by Ethereal if not set
        pass: process.env.EMAIL_PASS, // Will be generated by Ethereal if not set
    },
});

/**
 * Sends a booking confirmation email to the customer.
 */
const sendCustomerConfirmation = async (bookingDetails) => {
    const { property, booking, guest } = bookingDetails;

    const mailOptions = {
        from: '"SA Coastal Stays" <no-reply@sacoastalstays.co.za>',
        to: guest.email,
        subject: `Your Booking at ${property.title} is Confirmed! (Ref: #${booking.id})`,
        html: `
            <h1>Booking Confirmed!</h1>
            <p>Hi ${guest.full_name},</p>
            <p>Thank you for your booking at <strong>${property.title}</strong>.</p>
            <p><strong>Check-in:</strong> ${format(parseISO(booking.start_date), 'EEE, dd MMM yyyy')}</p>
            <p><strong>Check-out:</strong> ${format(parseISO(booking.end_date), 'EEE, dd MMM yyyy')}</p>
            <p><strong>Total Price:</strong> R${booking.total_price}</p>
            <p>We look forward to welcoming you!</p>
        `,
    };

    try {
        let info = await transporter.sendMail(mailOptions);
        console.log("Customer confirmation email sent: %s", info.messageId);
        // Log the Ethereal preview URL if using Ethereal
        if (nodemailer.getTestMessageUrl(info)) {
            console.log("Preview URL: %s", nodemailer.getTestMessageUrl(info));
        }
    } catch (error) {
        console.error("Error sending customer email:", error);
    }
};

/**
 * Sends a new booking notification email and SMS to the property owner.
 */
const sendOwnerNotification = async (bookingDetails) => {
    const { property, booking, guest } = bookingDetails;
    // In a real app, this email would come from the property owner's profile.
    const ownerEmail = process.env.OWNER_EMAIL_ADDRESS || "owner@example.com";
    const ownerPhone = process.env.OWNER_PHONE_NUMBER;

    // Email Notification
    const mailOptions = {
        from: '"SAStays System" <system@sacoastalstays.co.za>',
        to: ownerEmail,
        subject: `New Confirmed Booking at ${property.title}!`,
        html: `
            <h1>New Booking Received!</h1>
            <p><strong>Property:</strong> ${property.title}</p>
            <p><strong>Guest Name:</strong> ${guest.full_name}</p>
            <p><strong>Guest Email:</strong> ${guest.email}</p>
            <p><strong>Check-in:</strong> ${format(parseISO(booking.start_date), 'dd MMM yyyy')}</p>
            <p><strong>Check-out:</strong> ${format(parseISO(booking.end_date), 'dd MMM yyyy')}</p>
            <p><strong>Amount Paid:</strong> R${booking.total_price}</p>
        `,
    };

    try {
        let info = await transporter.sendMail(mailOptions);
        console.log("Owner notification email sent: %s", info.messageId);
        if (nodemailer.getTestMessageUrl(info)) {
            console.log("Preview URL: %s", nodemailer.getTestMessageUrl(info));
        }
    } catch (error) {
        console.error("Error sending owner email:", error);
    }

    // SMS Notification
    if (twilioClient && ownerPhone && twilioPhoneNumber) {
        try {
            const smsMessage = `New booking at ${property.title} from ${guest.full_name} for ${format(parseISO(booking.start_date), 'dd/MM')} - ${format(parseISO(booking.end_date), 'dd/MM')}. Total: R${booking.total_price}`;
            await twilioClient.messages.create({
                body: smsMessage,
                from: twilioPhoneNumber,
                to: ownerPhone
            });
            console.log('Owner notification SMS sent.');
        } catch (error) {
            console.error('Error sending owner SMS:', error.message);
        }
    } else {
        if (!twilioClient) console.log("Twilio client not initialized. Skipping SMS.");
        if (!ownerPhone) console.log("OWNER_PHONE_NUMBER not set in .env. Skipping SMS.");
    }
};

/**
 * Sends an owner registration confirmation email.
 * @param {string} email - The owner's email address.
 * @param {string} token - The confirmation token.
 */
const sendOwnerConfirmationEmail = async (email, token) => {
    const confirmUrl = `http://localhost:5001/api/owner/confirm/${token}`;
    const mailOptions = {
        from: 'SA Coastal Stays <no-reply@sacoastalstays.co.za>',
        to: email,
        subject: 'Confirm your owner account',
        html: `
            <h1>Confirm Your Account</h1>
            <p>Thank you for registering as an owner. Please confirm your email by clicking the link below:</p>
            <a href="${confirmUrl}">${confirmUrl}</a>
            <p>If you did not register, you can ignore this email.</p>
        `,
    };
    try {
        let info = await transporter.sendMail(mailOptions);
        console.log("Owner confirmation email sent: %s", info.messageId);
        if (nodemailer.getTestMessageUrl(info)) {
            console.log("Preview URL: %s", nodemailer.getTestMessageUrl(info));
        }
    } catch (error) {
        console.error("Error sending owner confirmation email:", error);
    }
};

/**
 * Sends a post-stay rating request email to the customer.
 * @param {object} bookingDetails - Contains customer, property, and booking info.
 */
const sendPostStayRatingRequest = async (bookingDetails) => {
    const { guest, property, booking } = bookingDetails;

    const mailOptions = {
        from: '"SA Coastal Stays" <no-reply@sacoastalstays.co.za>',
        to: guest.email,
        subject: `We hope you enjoyed your stay at ${property.title}!`,
        html: `
            <h1>Rate Your Stay!</h1>
            <p>Hi ${guest.full_name},</p>
            <p>Thank you for staying with us at <strong>${property.title}</strong>. We'd love to hear about your experience.</p>
            <p><a href="http://localhost:8080/rate-your-stay?booking_id=${booking.id}">Click here to leave a rating and review.</a></p>
        `,
    };

    try {
        let info = await transporter.sendMail(mailOptions);
        console.log("Post-stay rating request email sent: %s", info.messageId);
        if (nodemailer.getTestMessageUrl(info)) {
            console.log("Preview URL: %s", nodemailer.getTestMessageUrl(info));
        }
    } catch (error) {
        console.error("Error sending post-stay rating request email:", error);
    }
}

module.exports = { sendCustomerConfirmation, sendOwnerNotification, sendPostStayRatingRequest, sendOwnerConfirmationEmail };